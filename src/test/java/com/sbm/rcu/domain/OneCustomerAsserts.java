package com.sbm.rcu.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class OneCustomerAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOneCustomerAllPropertiesEquals(OneCustomer expected, OneCustomer actual) {
        assertOneCustomerAutoGeneratedPropertiesEquals(expected, actual);
        assertOneCustomerAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOneCustomerAllUpdatablePropertiesEquals(OneCustomer expected, OneCustomer actual) {
        assertOneCustomerUpdatableFieldsEquals(expected, actual);
        assertOneCustomerUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOneCustomerAutoGeneratedPropertiesEquals(OneCustomer expected, OneCustomer actual) {
        assertThat(actual)
            .as("Verify OneCustomer auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOneCustomerUpdatableFieldsEquals(OneCustomer expected, OneCustomer actual) {
        assertThat(actual)
            .as("Verify OneCustomer relevant properties")
            .satisfies(a -> assertThat(a.getDomaine()).as("check domaine").isEqualTo(expected.getDomaine()))
            .satisfies(a -> assertThat(a.getAggregateId()).as("check aggregateId").isEqualTo(expected.getAggregateId()))
            .satisfies(a -> assertThat(a.getAggregateType()).as("check aggregateType").isEqualTo(expected.getAggregateType()))
            .satisfies(a -> assertThat(a.getTimestamp()).as("check timestamp").isEqualTo(expected.getTimestamp()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOneCustomerUpdatableRelationshipsEquals(OneCustomer expected, OneCustomer actual) {
        assertThat(actual)
            .as("Verify OneCustomer relationships")
            .satisfies(a -> assertThat(a.getGoldenRecord()).as("check goldenRecord").isEqualTo(expected.getGoldenRecord()));
    }
}
