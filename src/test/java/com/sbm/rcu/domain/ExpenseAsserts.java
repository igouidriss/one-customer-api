package com.sbm.rcu.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class ExpenseAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertExpenseAllPropertiesEquals(Expense expected, Expense actual) {
        assertExpenseAutoGeneratedPropertiesEquals(expected, actual);
        assertExpenseAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertExpenseAllUpdatablePropertiesEquals(Expense expected, Expense actual) {
        assertExpenseUpdatableFieldsEquals(expected, actual);
        assertExpenseUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertExpenseAutoGeneratedPropertiesEquals(Expense expected, Expense actual) {
        assertThat(actual)
            .as("Verify Expense auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertExpenseUpdatableFieldsEquals(Expense expected, Expense actual) {
        assertThat(actual)
            .as("Verify Expense relevant properties")
            .satisfies(a -> assertThat(a.getExpenseType()).as("check expenseType").isEqualTo(expected.getExpenseType()))
            .satisfies(a -> assertThat(a.getAmount()).as("check amount").isEqualTo(expected.getAmount()))
            .satisfies(a -> assertThat(a.getDepositAmount()).as("check depositAmount").isEqualTo(expected.getDepositAmount()))
            .satisfies(a -> assertThat(a.getTotalAmount()).as("check totalAmount").isEqualTo(expected.getTotalAmount()))
            .satisfies(a -> assertThat(a.getShift()).as("check shift").isEqualTo(expected.getShift()))
            .satisfies(a -> assertThat(a.getDate()).as("check date").isEqualTo(expected.getDate()))
            .satisfies(a -> assertThat(a.getArrivalDate()).as("check arrivalDate").isEqualTo(expected.getArrivalDate()))
            .satisfies(a -> assertThat(a.getLeaveDate()).as("check leaveDate").isEqualTo(expected.getLeaveDate()))
            .satisfies(a -> assertThat(a.getGuestCount()).as("check guestCount").isEqualTo(expected.getGuestCount()))
            .satisfies(a -> assertThat(a.getHotelName()).as("check hotelName").isEqualTo(expected.getHotelName()))
            .satisfies(a -> assertThat(a.getHotelId()).as("check hotelId").isEqualTo(expected.getHotelId()))
            .satisfies(a -> assertThat(a.getRestaurantName()).as("check restaurantName").isEqualTo(expected.getRestaurantName()))
            .satisfies(a -> assertThat(a.getRestaurantId()).as("check restaurantId").isEqualTo(expected.getRestaurantId()))
            .satisfies(a -> assertThat(a.getClientId()).as("check clientId").isEqualTo(expected.getClientId()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertExpenseUpdatableRelationshipsEquals(Expense expected, Expense actual) {
        assertThat(actual)
            .as("Verify Expense relationships")
            .satisfies(a -> assertThat(a.getMetadata()).as("check metadata").isEqualTo(expected.getMetadata()))
            .satisfies(a -> assertThat(a.getExpenses()).as("check expenses").isEqualTo(expected.getExpenses()));
    }
}
